/*
 *
 * Exercise 2: Rectangle Class with Calculations
Goal: Practice methods that perform calculations based on properties.

Instructions:

Define a class named Rectangle.

The constructor should take width and height as arguments.

Add a method called getArea() that returns the area of the rectangle.

Add a method called getPerimeter() that returns the perimeter of the rectangle.

Create a Rectangle object and log its area and perimeter.
*
*/

/*
 *
 * A NOTE REGARDING THE CONSTRUCTOR
THINK OF THE CONSTRUCTOR AS THE MACHINE THAT HAS TO TAKE SOME INPUTS (INITIAL PROPERTIES) IN ORDER TO CREATE THE OBJECT.
HENCE THOSE PROPERTIES ARE ESSENTIAL AND MANDATORY FOR SUCH AN OBJECT.
THEREFORE EACH OBJECT IN THE WORLD HAS SOME MANDATORY PROPERTIES THAT WE HAVE TO DEFINE AND EXPECT TO BE PROVIDED WITH,
IN ORDER TO CREATE IT.
A SIMPLE EXAMPLE OF THAT IS THE RECTANGLE , IT'S A 2D SHAPE SO WE HAVE TO DEFINE THE LENGTH OF EACH DIMENSION!.
A MORE ADVANCED EXAMPLE THAT IS NOT BEING PRESENT RIGHT NOW IS THE TRIANGLE, BECUASE IT NEEDS VALIDATION.
BECAUSE WE CAN'T DEFINE A TRIANGLE ARBITRARY, THERE ARE RULES THAT GOVERNS THE CREATION OF IT.
SUCH AS THE SUM OF ANY TWO SIDES OF A TRIANGLE MUST BE GREATER THAN THE THIRD ONE,
WHETHER THIS TRIANGLE IS ISOSCELES OR RIGHT OR EQUILATERAL OR SCALENE.
SO THIS IS A UNIVERSAL RULE THAT APPLY (AND GOVERNS THE CREATION) TO ALL TRIANGLES,
THIS CONCEPT IS THE MOST POWERFUL ONE THAT WE WILL HAVE TO FIGURE OUT ALONG THE WAY,
WHICH IS TO DISCOVER THE EXACT PROPERTIES OR RULES FOR WHEN FORMING A BLUEPRINT THAT GOVERNS AN OBJECT,
IS TO BE A CORRECT AND GENERALIZED RULE,
BUT SINCE PROGRAMMING ISN'T STRICTLY MATH,
SO WE OUGHT TO DISCOVER THE THINGS THAT MAYBE WE THINK IT APPLIES 99% OF THE TIME BUT MAYBE JUST MAYBE IT'S NOT 100%.
*/

class Rectangle{
	constructor(width, height){
		this.width = width;
		this.height = height;
	}
	getArea(){
		return this.width*this.height;
	}
	getPerimeter(){
		return ((this.width*2)+(this.height*2));
	}
}


const rec = new Rectangle(7, 4);

console.og(rec.getArea());
console.log(rec.getPerimeter());
